name: Auto-Assign Picks Scheduler

# Este workflow se ejecuta cada 30 minutos durante d√≠as de partido (Jueves a Lunes)
# Verifica si es momento de ejecutar auto-assign-last-game-picks
on:
  schedule:
    # Ejecutar cada 30 minutos durante d√≠as de partido NFL
    # Jueves a Lunes: 10:00 AM - 2:00 AM (hora del servidor UTC)
    - cron: '*/30 16-23,0-8 * * 4,5,6,0,1'  # Jueves-Lunes, cada 30 min
  
  # Permitir ejecuci√≥n manual
  workflow_dispatch:

jobs:
  check-and-execute:
    runs-on: ubuntu-latest
    
    steps:
      - name: Verificar tiempo de ejecuci√≥n
        id: check_schedule
        run: |
          echo "üïê Consultando schedule desde API..."
          
          RESPONSE=$(curl -s -X GET "https://${{ secrets.VERCEL_DOMAIN }}/api/get-auto-assign-schedule")
          echo "Response: $RESPONSE"
          
          # Extraer should_execute_now
          SHOULD_EXECUTE=$(echo $RESPONSE | jq -r '.should_execute_now // false')
          MINUTES_UNTIL=$(echo $RESPONSE | jq -r '.minutes_until_execution // 999')
          EXECUTION_TIME=$(echo $RESPONSE | jq -r '.execution_time // "unknown"')
          CURRENT_WEEK=$(echo $RESPONSE | jq -r '.current_week // 0')
          
          echo "should_execute=$SHOULD_EXECUTE" >> $GITHUB_OUTPUT
          echo "minutes_until=$MINUTES_UNTIL" >> $GITHUB_OUTPUT
          echo "execution_time=$EXECUTION_TIME" >> $GITHUB_OUTPUT
          echo "current_week=$CURRENT_WEEK" >> $GITHUB_OUTPUT
          
          echo "üìä Semana actual: $CURRENT_WEEK"
          echo "‚è∞ Tiempo de ejecuci√≥n: $EXECUTION_TIME"
          echo "‚è≥ Minutos restantes: $MINUTES_UNTIL"
          echo "‚úÖ ¬øEjecutar ahora?: $SHOULD_EXECUTE"

      - name: Ejecutar auto-assign si es tiempo
        if: steps.check_schedule.outputs.should_execute == 'true'
        run: |
          echo "üöÄ EJECUTANDO AUTO-ASSIGN para semana ${{ steps.check_schedule.outputs.current_week }}"
          
          RESPONSE=$(curl -s -X POST "https://${{ secrets.VERCEL_DOMAIN }}/api/auto-assign-last-game-picks")
          echo "Response: $RESPONSE"
          
          # Verificar si fue exitoso
          STATUS=$(echo $RESPONSE | jq -r '.status // "error"')
          PICKS_ASSIGNED=$(echo $RESPONSE | jq -r '.picks_assigned // 0')
          
          if [ "$STATUS" = "completed" ]; then
            echo "‚úÖ Auto-assign completado exitosamente"
            echo "üìä Picks asignados: $PICKS_ASSIGNED"
          else
            echo "‚ö†Ô∏è Auto-assign retorn√≥ status: $STATUS"
            echo "üìä Picks asignados: $PICKS_ASSIGNED"
          fi

      - name: Esperar siguiente verificaci√≥n
        if: steps.check_schedule.outputs.should_execute == 'false'
        run: |
          echo "‚è∏Ô∏è A√∫n no es tiempo de ejecutar"
          echo "‚è≥ Faltan ${{ steps.check_schedule.outputs.minutes_until }} minutos"
          echo "‚è∞ Ejecuci√≥n programada para: ${{ steps.check_schedule.outputs.execution_time }}"
          echo "üîÑ Pr√≥xima verificaci√≥n en 30 minutos"

  notify-on-failure:
    needs: [check-and-execute]
    runs-on: ubuntu-latest
    if: failure()
    
    steps:
      - name: Notificar fallo
        run: |
          echo "‚ùå ERROR en auto-assign-scheduler"
          echo "‚ö†Ô∏è Revisar logs del workflow"
          # Aqu√≠ puedes agregar notificaciones por email, Slack, etc.
