name: Auto Assign Last Game Picks

# Disparadores para ejecutar este workflow
on:
  # Opci√≥n 1: Ejecutarse a una hora espec√≠fica despu√©s de monitorear los partidos
  # Se ejecuta a las 23:05 todos los d√≠as (5 minutos despu√©s del t√≠pico kickoff de juegos nocturnos)
  schedule:
    # Lunes 23:05 UTC (aproximadamente 5 minutos despu√©s de juegos de MNF t√≠picos)
    - cron: '5 23 * * 1'
    # Jueves 2:05 UTC (jueves por la noche/viernes madrugada - TNF)
    - cron: '5 2 * * 5'
    # Domingo 23:05 UTC (5 minutos despu√©s del √∫ltimo juego dominical)
    - cron: '5 23 * * 0'
  
  # Opci√≥n 2: Disparo manual para testing
  workflow_dispatch:
    inputs:
      environment:
        description: 'Entorno a ejecutar'
        required: false
        default: 'production'

# Variables de entorno comunes
env:
  NODE_ENV: production

jobs:
  auto-assign-picks:
    name: Auto Assign Last Game Picks
    runs-on: ubuntu-latest
    
    steps:
      - name: üìù Log job start
        run: |
          echo "Iniciando Auto Assign Picks Job"
          echo "Timestamp: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          echo "Workflow ID: ${{ github.run_id }}"
      
      - name: üîç Get last game from database
        id: get-last-game
        run: |
          # Este paso obtendr√≠a del servidor la hora del √∫ltimo partido
          # Para prop√≥sitos de demostraci√≥n, usamos la variable de entrada o asumimos que fue hace 5 mins
          echo "Checking for last game of week..."
          LAST_GAME_TIME=$(date -u -d '5 minutes ago' +'%Y-%m-%dT%H:%M:%SZ')
          echo "last_game_time=$LAST_GAME_TIME" >> $GITHUB_OUTPUT
      
      - name: ‚è∞ Calculate delay to game start + 5 minutes
        id: calculate-delay
        run: |
          # Obtener hora actual
          NOW=$(date -u +%s)
          
          # Simulaci√≥n: el job debe ejecutarse a las XX:05 cada d√≠a de juego
          # Si se ejecuta fuera de esa ventana, esperar al pr√≥ximo slot disponible
          echo "Current Unix timestamp: $NOW"
          echo "Job ejecutado en la ventana de tiempo configurada"
      
      - name: üöÄ Call auto-assign-last-game-picks endpoint
        id: auto-assign
        run: |
          # Llamar al endpoint con reintentos
          MAX_RETRIES=3
          RETRY_COUNT=0
          SUCCESS=false
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$SUCCESS" = false ]; do
            echo "Intento $((RETRY_COUNT + 1))/$MAX_RETRIES - Llamando auto-assign-last-game-picks..."
            
            RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
              "${{ secrets.API_BASE_URL }}/auto-assign-last-game-picks" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer ${{ secrets.API_SECRET_KEY }}" \
              --max-time 30)
            
            HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
            BODY=$(echo "$RESPONSE" | head -n-1)
            
            echo "HTTP Status: $HTTP_CODE"
            echo "Response: $BODY"
            
            if [ "$HTTP_CODE" = "200" ]; then
              SUCCESS=true
              echo "‚úÖ Auto assign picks completado exitosamente"
              echo "response=$BODY" >> $GITHUB_OUTPUT
              
              # Extraer picks_assigned del response (JSON parsing)
              PICKS_ASSIGNED=$(echo "$BODY" | grep -o '"picks_assigned":[0-9]*' | cut -d':' -f2)
              echo "picks_assigned=$PICKS_ASSIGNED" >> $GITHUB_OUTPUT
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "‚ö†Ô∏è Intento fallido, reintentando en 10 segundos..."
                sleep 10
              fi
            fi
          done
          
          if [ "$SUCCESS" = false ]; then
            echo "‚ùå Error: No se pudo completar auto-assign-last-game-picks despu√©s de $MAX_RETRIES intentos"
            exit 1
          fi
      
      - name: üìä Post-execution auto-update-picks
        id: auto-update
        run: |
          echo "Esperando 30 segundos antes de ejecutar auto-update-picks..."
          sleep 30
          
          echo "Llamando auto-update-picks para actualizar resultados de picks..."
          
          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
            "${{ secrets.API_BASE_URL }}/auto-update-picks" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.API_SECRET_KEY }}" \
            --max-time 30)
          
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | head -n-1)
          
          echo "Auto-update-picks Status: $HTTP_CODE"
          echo "Response: $BODY"
          
          if [ "$HTTP_CODE" = "200" ]; then
            echo "‚úÖ Auto-update-picks completado exitosamente"
          else
            echo "‚ö†Ô∏è Auto-update-picks retorn√≥ status: $HTTP_CODE"
          fi
      
      - name: üìß Send notification to Discord
        if: always()
        uses: sarisia/actions-status-discord@v1
        with:
          webhook_url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          status: ${{ job.status }}
          title: "Auto Assign Picks - ${{ job.status }}"
          description: |
            **Timestamp**: ${{ steps.get-last-game.outputs.last_game_time }}
            **Picks Assigned**: ${{ steps.auto-assign.outputs.picks_assigned || 'N/A' }}
            **Workflow Run**: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          color: |
            ${{ job.status == 'success' && '32768' || job.status == 'failure' && '16711680' || '16776960' }}

  # Job opcional: Trigger 5 minutos despu√©s del √∫ltimo partido (m√°s preciso)
  # Esta es una alternativa si quieres usar un trigger m√°s din√°mico
  check-and-trigger:
    name: Check Last Game Time and Trigger Auto Assign
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
      
      - name: üîÑ Get current season and last game time
        id: game-check
        run: |
          echo "Obteniendo informaci√≥n de temporada y √∫ltimos partidos..."
          
          # Este paso podr√≠a hacer una llamada HTTP a tu API para obtener:
          # 1. Semana actual
          # 2. Hora del √∫ltimo partido
          # 3. Comparar con hora actual
          
          LAST_GAME_TIMESTAMP=$(curl -s \
            "${{ secrets.API_BASE_URL }}/current-week" \
            -H "Authorization: Bearer ${{ secrets.API_SECRET_KEY }}" | \
            grep -o '"timestamp":"[^"]*' | cut -d'"' -f4)
          
          echo "Last game info retrieved"
          echo "last_game_timestamp=$LAST_GAME_TIMESTAMP" >> $GITHUB_OUTPUT
      
      - name: ‚è±Ô∏è Wait for 5 minutes after game start
        run: |
          echo "Este job verificar√≠a si hemos llegado al tiempo de ejecuci√≥n"
          echo "En producci√≥n, esto ser√≠a m√°s complejo y requerir√≠a coordinaci√≥n"
          echo "La soluci√≥n actual usa cron jobs a horas fijas de los d√≠as de juego"
      
      - name: ‚úÖ Trigger auto-assign if conditions met
        if: always()
        run: |
          echo "Las condiciones se cumplen, el job auto-assign-picks se ejecutar√°"
